Lecture 1:
APIs for products ordered::
--Allowing sellers to update the status of a product will require having to set up four
different APIs, including an API to retrieve the possible status values. Then, the
actual status update actions will need APIs to handle updates to the order itself as the
status is changed in order to initiate related actions, such as increasing the stock
quantity of a canceled product, and to create a charge on the customer's credit card
when a product is being processed. In the following sections, we will look at the API
implementations for retrieving possible status values, updating an order status,
canceling a product order, and processing a charge for an ordered product.

Get status values::
--The possible status values of an ordered product are set as enums in the CartItem
schema.

Update order status::
--When a product's status is changed to any value other than Processing or Cancelled,
a PUT request to '/api/order/status/:shopId' will directly update the order in
the database, given that the current user is the verified owner of the shop with the
ordered product.

Lecture 2:
Cancel product order::
--When a seller decides to cancel the order for a product, a PUT request will be sent to
/api/order/:shopId/cancel/:productId so that the product's stock quantity
can be increased and the order can be updated in the database.

--we will look at the process charge API, which is invoked if the seller
selects Processing as a status value instead.

Process charge for a product::
--When a seller changes the status of an ordered product to Processing, we will set up a
backend API to not only update the order but to also create a charge on the
customer's credit card for the price of the product multiplied by the quantity ordered.

--With these implementations in place, sellers can view orders that have been received
for their products in each of their shops and easily update the status of each product
ordered while the application takes care of additional tasks, such as updating stock
quantity and initiating payment

Lecture 3:
Viewing single-order details::
--With the Order collection and the database access all set up, moving forward, it is
easy to add the features of listing orders for each user and showing details of a single
order in a separate view where the user can track the status of each ordered product.
