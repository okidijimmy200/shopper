Extending the Marketplace for Orders and Payments
--implementing
capabilities for buyers to add products to a shopping cart, a checkout, and place
orders, and for sellers to manage these orders and have payments processed from the
marketplace application

In this chapter, we will extend the online marketplace by covering the following
topics:
--Introducing a cart, payments, and orders in the MERN Marketplace
--Implementing a shopping cart
--Using Stripe for payments
--Integrating the checkout process
--Creating a new order
--Listing orders for each shop
--Viewing single-order details

Lecture 1:
Introducing cart, payments, and orders in the MERN Marketplace

Implementing a shopping cart::
--Implementing a shopping cart
Visitors to the MERN Marketplace can add products they wish to buy to a shopping
cart by clicking the add to cart button on each product. A cart icon on the menu will
indicate the number of products that have already been added to their cart as the user
continues to browse through the marketplace. They can also update the cart's
contents and begin the checkout process by opening the cart view. But to complete
the checkout process and place an order, users will be required to sign in.

--The shopping cart is mainly a frontend feature, so the cart details will be stored
locally on the client side until the user places the order at checkout. To implement the
shopping cart features, we will set up helper methods in client/cart/carthelper.
js that will help manipulate the cart details from relevant React
components

Adding to the cart::


Cart icon in the menu::
--In the menu, we will add a link to the cart view, as well as a badge that displays the
length of the cart array stored in localStorage in order to visually inform the user
of how many items are currently in their cart.

The cart view::
--The cart view will contain the cart items and checkout details. But initially, only the
cart details will be displayed until the user is ready to check out.

The CartItems component::
--The CartItems component will allow the user to view and update the items
currently in their cart. It will also give them the option to start the checkout process if
they are signed in.

Retrieving cart details::

Modifying quantity::
--Each cart item displayed in the cart view will contain an editable TextField that will
allow the user to update the quantity for each product they are buying, with a
minimum allowed value of 1,

Removing items::
--Each item in the cart will have a remove option next to it. This remove item option is
a button that, when clicked, passes the array index of the item to the removeItem
method so that it can be removed from the array.

Showing the total price::
--At the bottom of the CartItems component, we will display the total price of the
items in the cart.

Option to check out::
--The user will see the option to perform the checkout depending on whether they are
signed in and whether the checkout has already been opened,

--Once the checkout value is set to true in the Cart view, the Checkout component
will be rendered to allow the user to enter the checkout details and place an order.
This will complete the buying process for a user, who is now able to add items to
their shopping cart and modify each item until they are ready to checkout.

Lecture 2:
Using Stripe for payments::
--Payment processing is required across implementations of the checkout, order
creation, and order management processes. It also involves making updates to both
the buyer's and seller's user data.

--Stripe provides an extensive set of tools that are necessary to integrate payments in
any web application. These tools can be selected and used in different ways,
depending on the specific type of application and the payment use case being
implemented.

--In the following sections, we will discuss how to connect a Stripe account for each
seller, collect credit card details from the user with Stripe Card Elements, use Stripe
Customer to record the user's payment information securely, and create a charge with
Stripe for processing a payment.

Stripe-connected account for each seller::
--To create charges on behalf of sellers, the application will let a user, who is a seller,
connect their Stripe account to their MERN Marketplace user account.
--will implement this functionality by updating the user model
so that it can store Stripe credentials, add the view components to allow users to
connect to Stripe, and add a backend API to complete Stripe OAuth before updating
the database with the retrieved credentials from Stripe

Updating the user model::
--When a seller connects their Stripe account to the marketplace, we will need to store
their Stripe credentials with their other user details so that they can be used later for
payment processing when they sell products.


Button to connect with Stripe::


The StripeConnect component::
--The StripeConnect component will basically complete the remaining auth process
steps with Stripe and render the relevant messages based on whether the Stripe
connection was successful

Lecture 3:
The stripe auth update API::
--Once the Stripe account has been connected, to complete the OAuth process, we need
to make a POST API call to Stripe OAuth from our server. We need to send the
previously retrieved auth code to Stripe OAuth with the POST API call and receive
the credentials to be stored in the seller's user account for processing charges. We will
achieve this Stripe auth update by implementing an update API in the backend.

--To make a POST request to the Stripe API from our server, we will use the request
node module,

************yarn add request********8

-These auth credentials retrieved from Stripe can be used in our application to create
charges on customer credit cards on behalf of the seller when they sell products from
their shops

Lecture 4:
Stripe Card Elements for checkout::
--During checkout, to collect credit card details from the user, we will use Stripe's Card
Elements to add the credit card field to the checkout form. To integrate Card
Elements with our React interface, we will utilize the react-stripeelements
node module

**********yarn add react-stripe-elements************8

--We will also need to inject the Stripe.js code into template.js to access Stripe in
the frontend code

<script id="stripe-js" src="https://js.stripe.com/v3/"></script>

--For the MERN Marketplace, Stripe will be required in the Cart view, where the
Checkout component needs it to render Card Elements and process card detail
input. We will wrap the Checkout component we added to Cart.js with the
StripeProvider component from react-stripe-elements so that the Elements
component in Checkout has access to the Stripe instance.

Lecture 5
Stripe Customer for recording card details::
--When an order is being placed at the end of the checkout process, the generated card
token will be used to create or update a Stripe Customer.

--To integrate
Stripe Customer with our application, in the following sections, we will update the
user model so that it stores Stripe Customer details and update the user controller
methods so that we can create or update Stripe Customer information using the Stripe
node module in the backend.

Updating the user model::
--To use Stripe Customer to securely store the credit card information of each user and
process payments as needed in the application, we need to store details of the Stripe
Customer associated with each user

Updating the user controller::

..yarn add stripe************88

Updating an existing Stripe Customer::
--Once a Stripe Customer has been created, we can update
the Stripe Customer the next time a user enters credit card details for a new order

Creating a charge for each product that's processed::
--When a seller updates an order by processing the product that was ordered in their
shop, the application will create a charge on behalf of the seller on the customer's
credit card for the cost of the product ordered.

--The createCharge controller method will be called when the server receives a
request to update an order with a product status change to Processing.

