Lecture 1:
Integrating the checkout process
--Users who are signed in and have items added to their cart will be able to start the
checkout process. We will add a Checkout form to collect customer details, delivery
address information, and credit card information

--This checkout view will consist of two parts, with the first part for collecting buyer
details including name, email, and delivery address, and the second part for entering
credit card details and placing the order.

Initializing checkout details::
--we will create the checkout view, which contains the form fields and
the place order option in a Checkout component. In this component, we will
initialize the checkoutDetails object in the state before collecting the details from
the form. We will prepopulate the customer details based on the current user's details
and add the current cart items to checkoutDetails

--These customer information values, which are initialized in checkoutDetails, will
be updated when the user interacts with the form fields.

Customer information::
--When the user updates the values in these two fields,
the handleCustomerChange method will update the relevant details in the state.

Delivery address:
--To collect the delivery address from the user, we will add fields to collect address
details such as the street address, city, state, zip code, and country name to the
checkout form.

--With these text fields and handle change functions in place, the checkoutDetails
object in the state will contain the customer information and delivery address that
was entered by the user.

Placing an order::
--The remaining steps of the checkout process will involve collecting the user's credit
card details securely, thus allowing the user to place the order, emptying the cart
from storage, and redirecting the user to a view with the order details.

--building a PlaceOrder component we will use
Stripe Card Elements to collect credit card details, add a place order button for the
user to complete the checkout process, utilize a cart helper method to empty the cart,
and redirect the user to an order view.

Using Stripe Card Elements::
--In order to use Stripe's CardElement component from react-stripe-elements to
add the credit card field to the PlaceOrder component, we need to wrap the
PlaceOrder component using the injectStripe higher-order component (HOC)
from Stripe.

--This is because the CardElement component needs to be part of a payment form
component that is built with injectStripe and also wrapped with the Elements
component. So, when we create a component called PlaceOrder, we will wrap it
with injectStripe before exporting it

The CardElement component::

Lecture 2:
Adding a button to place an order::
--Clicking on the Place Order button will call the placeOrder method, which will
attempt to tokenize the card details using stripe.createToken. If this is
unsuccessful, the user will be informed of the error, but if this is successful, then the
checkout details and generated card token will be sent to our server's create order API

Empty cart::
--If the request to the create order API is successful, we will empty the cart in
localStorage so that the user can add new items to the cart and place a new order if
desired.

Redirecting to the order view::
--view, which will show them the details of the order that was just placed.

Lecture 3:
Creating a new order::
--When a user places an order, the details of the order that were confirmed at checkout
will be used to create a new order record in the database, update or create a Stripe
Customer for the user, and decrease the stock quantities of products ordered.

Defining an Order model::
--To store the orders in the backend, we will define a Schema for the order model that
will record order details including the customer details, payment information, and an
array of the products ordered. The structure of each product in this array of products
ordered will be defined in a separate subschema called CartItemSchema.

The Order schema::
--The Order schema defined in server/models/course.model.js will contain fields
for storing the customer's name and email, along with their user account reference,
delivery address information, payment reference, created and updated-at
timestamps, and an array of products ordered

--The fields in this schema definition will enable us to store the necessary details for
each order

Lecture 4:
The CartItem schema::
--The CartItem schema will represent each product that was ordered when an order
was placed. It will contain a reference to the product, the quantity of the product that
was ordered by the user, a reference to the shop the product belongs to, and its status,

--The Order schema and CartItem schema defined here will allow us to record details
about the customer and products that were ordered as required to complete the
purchase steps for the products that were bought by a user

Create order API::
--The create order API in the backend will take a POST request from the frontend to
create the order in the database

Decrease product stock quantity::
--When an order is placed, we will decrease the stock quantity of each product ordered
according to the quantity ordered by the user. This will automatically reflect the
updated quantities of the products in the associated shops after an order is placed.

Create controller method::
--create controller is the last method
that's invoked when the create order API receives a request.
--This method takes the
order details, creates a new order, and saves it to the Order collection in
MongoDB.

--With this implemented, orders can be created and stored in the backend by any
signed-in user on the MERN Marketplace. Now, we can set up APIs to fetch lists of
orders by user, orders by shop, or read an individual order and display the fetched
data to views in the frontend.

Lecture 5:
Listing orders by shop::
--An important feature of the marketplace is allowing sellers to see and update the
status of orders they've received for products in their shops. To implement this, we
will set up backend APIs to list orders by shop and update an order as a seller
changes the status of a purchased product. Then, we will add some frontend views
that will display the orders and allow the seller to interact with each order

The list by shop API::
--we will implement an API to get orders for a specific shop so that
authenticated sellers can view the orders for each of their shops in one place.

The ShopOrders component::
--The ShopOrders component will be the view where sellers will be able to see the list
of orders that have been received for a given shop. In this view, each order will only
show the purchased products that are relevant to the shop and allow the seller to
change the status of the ordered product with a dropdown of possible status values,

--In the
ShopOrders component, we will fetch and list the orders for the given shop, and for
each order, we'll render the order details along with the list of products that were
ordered in a React component named ProductOrderEdit.

List orders::
--When the ShopOrders component mounts in the view, we will retrieve the list of
orders for the provided shop ID from the database and set it to the state to be
rendered in the view. We will make a request to the backend API to list orders by
shop using the listByShop fetch method and set the retrieved orders to the state in a
useEffect hook,

The ProductOrderEdit component::
-we will implement a ProductOrderEdit component to render all the
products in the order with an edit status option.

Handling actions to cancel a product order::
--If the seller wishes to cancel the order for a product and selects Cancelled from the
status values dropdown for a specific product in the order, we will call the
cancelProduct fetch method inside the handleStatusChange method

Handling the action to process charge for a product::
--If a seller chooses to process the order for a product, we will need to invoke an API
that will charge the customer for the total cost of the product ordered. So, when a
seller selects Processing from the status values dropdown for a specific product in the
order, we will call the processCharge fetch method inside
the handleStatusChange method,

Handling the action to update the status of a product::
--how the update order API is invoked if the seller chooses to update the status of a
product that's been ordered to any value other than Cancelled or Processing