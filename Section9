Adding Real-Time Bidding Capabilities to the Marketplace
In this chapter, we will extend the online marketplace application by covering the
following topics:
--Introducing real-time bidding in the MERN Marketplace
--Adding auctions to the marketplace
--Displaying the auction view
--Implementing real-time bidding with Socket.IO

Lecture 1:
Introducing real-time bidding in the MERN Marketplace.
--In this chapter, we
will extend these functionalities to allow sellers to create auctions for items that other
users can place bids on in a fixed duration of time. The auction view will describe the
item for sale and let signed in users place bids when the auction is live.

--Different users can place their own bids, and also see other users placing bids in real-time, with
the view updating accordingly.

Adding auctions to the marketplace::
--we will allow a user who is signed in and has an active seller account to create auctions for items that they want other users to place bids on.
--To enable the features of adding and managing auctions, we will need to define how
to store auction details and implement the full-stack slices that will let users create,
access and update auctions on the platform.

Defining an Auction model::
--The Auction Schema in this model will have fields to store auction details
such as the name and description of the item being auctioned, along with an image
and a reference to the seller creating this auction. It will also have fields that specify
the start and end time for bidding on this auction, a starting value for bids, and the
list of bids that have been placed for this auction.

--These auction-related fields will allow us to implement auction and bidding-related
features for the MERN Marketplace application.

Lecture 2:
Creating a new auction:::
---For a seller to be able to create a new auction on the platform, we will need to
integrate a full-stack slice that allows the user to fill out a form view in the frontend,
and then save the entered details to a new auction document in the database in the
backend.

The create auction API::
--For the implementation of the backend API, which will allow us to create a new
auction in the database, we will declare a POST route.

Fetching the create API in the view::
--to make a request to this create API, we will set up a fetch method
on the client-side to make a POST request to the API route and pass it the multipart
form data containing details of the new auction in the body.

Lecture 3:
The NewAuction component::
--Sellers in the marketplace application will interact with a form view to enter details of
a new auction and create the new auction. We will render this form in
the NewAuction component, which will allow a seller to create an auction by entering
an item name and description, uploading an image file from their local filesystem,
specifying the starting bid value, and creating date-time values for starting and
ending bidding on this auction.

--the date-time input options
for the auction start and end timings. To add these fields, we'll use Material-UI
TextField components with type set to datetime-local.

--This link can be added to any of the view components that may be accessed by the
seller, for example, in a view where a seller manages their auctions in the
marketplace

Lecture 4:
Listing auctions::
--All users browsing through the platform will be able to view the
currently open auctions, in other words, auctions that are live or are going to start at a
future date. The sellers will be able to view a list of auctions that they created, while
signed in users will be able to view the list of auctions they placed bids in.

The open Auctions API::
--To retrieve the list of open auctions from the database, we will define a backend API
that accepts a GET request and queries the Auction collection to return the open
auctions that are found in the response.

The Auctions by bidder API::
--To be able to display all the auctions that a given user placed bids in, we will define a
backend API that accepts a GET request and queries the Auction collection so that it
returns the relevant auctions in the response.

The Auctions by seller API::
--Sellers in the marketplace will see a list of auctions that they created. To retrieve these
auctions from the database, we will define a backend API that accepts a GET request
and queries the Auction collection so that it returns the auctions by a specific seller.

Lecture 5:
The Auctions component::
--The different auction lists in the application will be rendered using a React
component that takes an array of auction objects as props. We will implement this
reusable Auctions component and add it to the views that will retrieve and display
either the open auctions, auctions by a bidder, or auctions by a seller.

--This Auctions component, which renders a list of auctions with the details and a
status of each, can be added to other views that will display different auction lists. If
the user who's currently viewing an auction list happens to be a seller for a given
auction in the list, we also want to render the option to edit or delete the auction to
this user.

Editing and deleting auctions::
--A seller in the marketplace will be able to manage their auctions by either editing or
deleting an auction that they've created. The implementations of the edit and delete
features will require building backend APIs that save changes to the database and
remove an auction from the collection.

Updating the list view::
--We will update the code for the auctions list view to conditionally show the edit and
delete options to the seller. In the Auctions component, which is where a list of
auctions is iterated over to render each item in ListItem, we will add two more
options in the ListItemSecondaryAction component

Edit and delete auction APIs::
--To complete the edit auction and delete auction operations initiated by sellers from
the frontend, we need to have the corresponding APIs in the backend.



