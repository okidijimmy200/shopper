Lecture 1:
Displaying the auction view::
--The view for displaying a single auction will contain the core functionality of the
real-time auction and bidding features for the marketplace.

--Before getting into the implementation of real-time bidding, we will set up the full-stack slice for retrieving
details of a single auction and display these details in a React component that will
house the auction display, timer, and bidding capabilities.

The read auction API::
--To display the details of an existing auction in a view of its own, we need to add a
backend API that will receive a request for the auction from the client and return its
details in the response.

The Auction component::
--We will implement an Auction component to fetch and display the details of a single
auction to the end user. This view will also have real-time update functionalities that
will render based on the current state of the auction and on whether the user viewing
the page is signed in.

--Auction component route can be used in any component to link to a specific auction

Lecture 2:
Adding the Timer component::
--When the auction is live, we will give the users a real-time update of how long they
have before bidding ends on this given auction. We will implement a Timer
component and conditionally render it in the Auction component to achieve this
feature.
--timer will count down the seconds and show how much time is left to the
users viewing the live auction.

--The remaining time decreases per second as the user is viewing the live auction. We
will implement this countdown feature in the Timer component, which is added to
the Auction component

--The Auction component provides it with props containing
the auction end time value, as well as a function to update the auction view when the
time ends.

--These props will be used in the Timer component to calculate time left and to update
the view when time is up.

--As a result, the timeLeft value will keep updating every second until the timeEnd
value is true. When the timeEnd value does become true as the time is up, we will
execute the update function that's sent in the props from the Auctions component

Lecture 3:
Implementing real-time bidding with Socket.IO::
--Users who are signed in to the marketplace platform will be able to take part in live
auctions. They will be able to place their bids and get real-time updates in the same
view while other users on the platform are countering their bids.

Integrating Socket.IO::
--Socket.IO will allow us to add the real-time bidding feature to auctions in the
marketplace application. Socket.IO is a JavaScript library with a client-side module
that runs in the browser and a server-side module that integrates with Node.js.
Integrating these modules with our MERN-based application will enable bidirectional
and real-time communication between the clients and the server.

we will install the client and server
libraries with Yarn by running the following command from the command line:
**************yarn add socket.io socket.io-client******

--With the Socket.IO libraries added to the project, we will update our backend to
integrate Socket.IO with the server code. We need to initialize a new instance of
socket.io using the same HTTP server that we are using for our application.

--These events will be received by the server socket connection, resulting in
subscription or unsubscription of the client to the given auction room

Placing bids::
--When a user on the platform is signed in and viewing an auction that is currently live,
they will see an option to place their own bid.

--To allow users to place their bids, in the following sections, we will add a form that
lets them enter a value more than the last bid and submit it to the server using socket
communication. Then, on the server, we will handle this new bid that's been sent over
the socket so that the changed auction bids can be saved in the database and the view
can be updated instantly for all connected users when the server accepts this bid.

Adding a form to enter a bid::


Receiving a bid on the server::
--When a new bid is placed by a user and emitted over a socket connection, it will be
handled on the server so that it's stored in the corresponding auction in the database.

Displaying the changing bidding history::
--After a new bid is accepted on the server and stored in the database, the new array of
bids will be updated in the view for all the clients currently on the auctions page.

Updating the view state with a new bid::

Rendering the bidding history::
--we will render a table that displays the details of all the
bids that were placed for the given auction. This will inform the user of the bids that
were already placed and are being placed in real-time as they are viewing a live
auction.

--When a new bid is placed by any user viewing this auction and the updated auction
is received in the socket and set to state, this table containing the bidding history will
update for all its viewers and show the latest bid at the top of the table. By doing this,
it gives all the users in the auction room a real-time update of bidding